services:
  bus-service:
    image: rabbitmq
    container_name: bus-service
    restart: always
    expose:
      - "5672"
      - "15672"
    networks:
      - app-network

  config-service:
    build:
      context: ./config-service
      dockerfile: Dockerfile
    image: hyeonseong1010/config-service:latest
    container_name: config-service
    restart: always

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

    environment:
      - RABBITMQ_HOST=bus-service
    expose:
      - "8888"
    networks:
      - app-network

  discovery-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    image: hyeonseong1010/discovery-service:latest
    container_name: discovery-service
    restart: always
    environment:
      - EUREKA_SERVER=http://discovery-service:8761/eureka
      - CONFIG_SERVER=http://config-service:8888
    ports:
      - "8761:8761"
    depends_on:
      - config-service
    networks:
      - app-network

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    image: hyeonseong1010/gateway-service:latest
    container_name: gateway-service
    restart: always
    environment:
      - EUREKA_SERVER=http://discovery-service:8761/eureka
      - CONFIG_SERVER=http://config-service:8888
      - RABBITMQ_HOST=bus-service
    ports:
      - "8000:8000"
    depends_on:
      - config-service
      - discovery-service
    networks:
      - app-network

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    image: hyeonseong1010/user-service:latest
    container_name: user-service
    restart: unless-stopped
    environment:
      - EUREKA_SERVER=http://discovery-service:8761/eureka
      - CONFIG_SERVER=http://config-service:8888
      - RABBITMQ_HOST=bus-service
    depends_on:
      - config-service
      - discovery-service
    networks:
      - app-network

  chat-service:
    build:
      context: ./chat-service
      dockerfile: Dockerfile
    image: hyeonseong1010/chat-service:latest
    container_name: chat-service
    restart: unless-stopped
    environment:
      - EUREKA_SERVER=http://discovery-service:8761/eureka
      - CONFIG_SERVER=http://config-service:8888
      - RABBITMQ_HOST=bus-service
      - BOOTSTRAP_SERVERS=Kafka00Service:9092,Kafka01Service:9093,Kafka02Service:9094
    depends_on:
      - config-service
      - discovery-service
    networks:
      - app-network

  community-service:
    build:
      context: ./community-service
      dockerfile: Dockerfile
    image: hyeonseong1010/community-service:latest
    container_name: community-service
    restart: unless-stopped
    environment:
      - EUREKA_SERVER=http://discovery-service:8761/eureka
      - CONFIG_SERVER=http://config-service:8888
      - RABBITMQ_HOST=bus-service
    depends_on:
      - config-service
      - discovery-service
    networks:
      - app-network

  kafka00:
    image: bitnami/kafka:3.7.0
    restart: unless-stopped
    container_name: kafka00
    ports:
      - '9092:9092'
      - '10000:10000'
    environment:
      # KRaft 설정
      - KAFKA_ENABLE_KRAFT=yes # KRaft 모드 활성화
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_KRAFT_CLUSTER_ID=HsDBs9l6UUmQq7Y5E6bNlw # 고유 클러스터 ID, 모든 브로커에 동일하게 설정
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@Kafka00Service:9093,1@Kafka01Service:9093,2@Kafka02Service:9093
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      # 리스너 설정
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:10000
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://Kafka00Service:9092,EXTERNAL://localhost:10000
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # 클러스터 설정
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=2
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
    networks:
      - app-network
    volumes:
      - kafka00:/bitnami/kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    restart: unless-stopped
    container_name: kafka-web-ui
    ports:
      - '9090:8080'
    environment:
      - KAFKA_CLUSTERS_0_NAME=Local-Kraft-Cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=Kafka00Service:9092,Kafka01Service:9092,Kafka02Service:9092
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED=true
    depends_on:
      - kafka00
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: minio-service
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  Kafka00:
    driver: local
  minio_data: