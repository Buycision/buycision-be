# secrets 토큰
# DOCKER
### DOCKER_ID
### DOCKER_TOKEN
# VM인스턴스
### GCP_HOST
### GCP_SSH_KEY
### GCP_USERNAME

# 이름
name: Deploy-config-service

# 컨테이너 환경 설정
env:
  CONTAINER_NAME: config-service
  MAIN_NAME: buycision

# 이벤트 트리거
on:
  push:
    branches:
      - config/**

jobs:
  Integration:
    runs-on: ubuntu-latest

    steps:
      # 해당 브랜치 소스 코드 가져오기
      - name: Checkout code
        uses: actions/checkout@v2

      # 자바 다운로드
      - name: JDK install
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      # Gradle Package Caching
      # caching 을 하면 시간이 덜 소모되어 빠르게 가능하다는 장점 존재
      - name: Caching Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      # Gradle 권한 변경
      - name: Grant execute permission for gradle
        run: chmod +x ./gradlew

      # develop 브랜치일 경우 dev 환경 빌드
      # spring.profiles.active를 dev로 설정하여 Spring Boot 애플리케이션이 개발 환경 설정을 따르도록 지정.
      - name: create build file
        run: ./gradlew clean build -i --no-daemon -x test

      # push event일 경우 CD job에 jar file 업로드
      - name: (Push) Archive production artifacts
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build/libs/*.jar

  Deployment:
    if: github.event_name == 'push'
    needs: Integration
    runs-on: ubuntu-latest

    steps:
      # 소스코드 가져오기
      - name: Checkout source code
        uses: actions/checkout@v4

      # 이전 Job에서 업로드한 Jar file 다운로드
      - name: Download a built Jar File
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build/libs

      # Docker 연동하기
      # Docker Buildx Setting
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Docker Hub 로그인
      - name: Docker Hub to Login
        uses: docker/login-action@v2.1.0
        with:
          username: ${{secrets.DOCKER_ID}}
          password: ${{secrets.DOCKER_TOKEN}}

      # Docker 이미지, 빌드
      # 아래 부분 cache 지정하여 빌드 속도 단축
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKER_ID }}/${{ env.CONTAINER_NAME }}:${{github.run_number}}
            ${{ secrets.DOCKER_ID }}/${{ env.CONTAINER_NAME }}:latest
          cache-from: type=gha    # gha=Github Action Cache
          cache-to: type=gha,mode=max

      #      # Docker-compose 다운
      #      - name: Setup docker-compose
      #        uses: KengoTODA/actions-setup-docker-compose@v1.2.3

      # 쉘 스크립트 생성
      - name: Create and execute deploy script
        run: |
          echo '#!/bin/bash' > deploy.sh
          echo 'sudo docker-compose stop ${{env.CONTAINER_NAME}}' >> deploy.sh
          echo 'sudo docker-compose rm ${{env.CONTAINER_NAME}}' >> deploy.sh
          echo 'sudo docker-compose -f docker-compose.yml up --build -d ${{env.CONTAINER_NAME}}' >> deploy.sh
          echo 'sudo docker-compose ps' >> deploy.sh

      # 소스 옮기기
      - name: Transfer Deploy Script use SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USERNAME }}
          key: ${{ secrets.GCP_SSH_KEY }}
          source: deploy.sh
          target: /home/${{ secrets.GCP_USERNAME }}/deploy


      # SSH Connect
      - name: Execute Server Init Script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USERNAME }}
          key: ${{ secrets.GCP_SSH_KEY }}
          script_stop: true
          script: |
            chmod +x /home/${{ secrets.GCP_USERNAME }}/deploy/deploy.sh && 
            sh /home/${{ secrets.GCP_USERNAME }}/deploy/deploy.sh